{
	"info": {
		"_postman_id": "8320a87b-617b-425e-82dc-5b019508654a",
		"name": "Expertos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23780244"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status is not an unexpected status code\", () => {",
							"  // no devuelva error ",
							"  const expectedStatusCode = 404;",
							"",
							"  pm.response.to.not.have.status(expectedStatusCode);",
							"});",
							"",
							"pm.test(\"API responds\", () => {",
							"  // que la API responda",
							"  const expectedTimeInMilliseconds = 1000;",
							"",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(",
							"    expectedTimeInMilliseconds + 1,",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`",
							"  );",
							"});",
							"",
							"pm.test(\"API response contains the expected fields\", () => {",
							"  const response = pm.response.json();",
							"  // verifica que el el contenido de la API sea correto",
							"  pm.expect(response).to.have.property(\"-NGFmVFKDO9rJIqvVCd_\");",
							"",
							"});",
							"",
							"// Iteración sobre un array para validar la data",
							"pm.test(\"Accessing the array\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"-NGFmVFKDO9rJIqvVCd_\"][\"Nombre\"]).to.match(/Maria/);",
							"    pm.expect(jsonData[\"-NGFmebQ2o7sDb2f0lVV\"][\"Correo\"]).to.match(/ollana3214@gmail.com/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/Expertos.json",
					"host": [
						"{{host}}"
					],
					"path": [
						"Expertos.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status is not an unexpected status code\", () => {",
							"  // no devuelva error ",
							"  const expectedStatusCode = 404;",
							"",
							"  pm.response.to.not.have.status(expectedStatusCode);",
							"});",
							"",
							"pm.test(\"API responds\", () => {",
							"  // que la API responda",
							"  const expectedTimeInMilliseconds = 1000;",
							"",
							"  pm.expect(pm.response.responseTime).to.be.lessThan(",
							"    expectedTimeInMilliseconds + 1,",
							"    `The endpoint did not respond within ${expectedTimeInMilliseconds} ms. Response came in ${pm.response.responseTime} ms`",
							"  );",
							"});",
							"",
							"// pm.test(\"Successful POST request\", () => {",
							"//   pm.expect(pm.response.code).to.be.oneOf([\"1234\", \"-NFBaLMXQnmDswvXLlLG\", \"-NFuhuW8ZIuTgOWtbMZU\"]);",
							"// });",
							"",
							"// Detecta si la key Correo contiene data correcta",
							"pm.test(\"Returns correct data in email\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.Correo).to.match(/^[a-zA-z0-9\\ ]*$/);",
							"});",
							"",
							"pm.test(\"Returns correct data in password\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.Contrasseña).to.match(/^[a-zA-z0-9\\ ]*$/);",
							"});",
							"",
							"// revisar luego",
							"pm.test(\"Save the name returned in the response as an environment variable\", function () {",
							"    let jsonResponse = pm.response.json();",
							"    pm.environment.set(\"name\", jsonResponse.Nombre);",
							"});",
							"",
							"// verificar si la información o id al hacer post existe",
							"var resp = JSON.parse(responseBody);",
							"console.log(resp);",
							"if (!resp.hasOwnProperty(\"Nombre\")){",
							"pm.test(\"Info is present\", () => {",
							"    console.log(\"Passed\");",
							"});}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n        \"Apellidos\": \"Castañeda\",\n        \"Contrasseña\": \"8777b52993cd84107a65d1633kkc74f5\",\n        \"Correo\": \"jenncasta99@gmail.com\",\n        \"Nombre\": \"Jennifer\"\n    \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/Expertos.json/",
					"host": [
						"{{host}}"
					],
					"path": [
						"Expertos.json",
						""
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://chat-edusex-default-rtdb.firebaseio.com"
		}
	]
}